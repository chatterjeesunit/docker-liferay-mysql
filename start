#!/bin/sh

# If any custom OSGI jars need to be deployed
# - zip the jar files with name as "osgi_jars.zip"
# - don't keep any folder structure within the zip file
# - Use docker cp command to copy the "osgi_jars.zip" file to $LIFERAY_HOME/osgi folder
# When the application will start next time, the script will extract the jar files to osgi deploy folder
cd $LIFERAY_HOME
echo 'Deploying Custom OSGI Jars to Liferay'
test -e osgi_jars.zip &&  unzip -o -d ./deploy/ osgi_jars.zip

# If any custom properties need to be deployed, e.g custom portal-ext.properties, or osgi config files.
# Create a zip of the properties file (with relative folder structure from Liferay base folder)
# Example zip file content could be
#   |_ portal-ext.properties
#   |_ portal-setup-wizard.properties
#   |_ osgi
#      |_configs
#         |_com.liferay.portal.bundle.blacklist.internal.BundleBlacklistConfiguration
#         |_com.liferay.portal.search.elasticsearch.configuration.ElasticsearchConfiguration.config
#   |_ tomcat-8.0.32
#       |_ ROOT
#         |_ WEB-INF
#            |_ classes
#                |_ log4j.properties
##
# Zip the property/config files as config.zip
# Use docker cp command to copy the the "config.zip" file to $LIFERAY_HOME folder
# When the application will start next time, the script will extract the config files into liferay base folder.
cd $LIFERAY_HOME
test -e config.zip &&  unzip -o -d . config.zip

echo "Starting MySQL Service"
sudo service mysql start

echo "Starting Elastic Search Server from $ELASTIC_HOME"
cd $ELASTIC_HOME/bin
./elasticsearch -d -Des.network.host=0.0.0.0 -Des.cluster.name=test-cluster -Des.bootstrap.memory_lock=true -Des.http.port=9200

echo "Sleeping for 10 seconds"

sleep 10

echo "Checking if elastic search server is working"
curl http://0.0.0.0:9200/_nodes/_all/process?pretty=true
echo ""

# Create .docx4all folder in user home directory
# Without this the DOCX4J code was failing.
sudo mkdir -p "/home/user/.docx4all/temporary embedded fonts"

echo "Starting Liferay Application now"
cd $LIFERAY_HOME/tomcat-8.0.32/bin
rm -f ../logs/catalina.out
rm -f ../logs/*.log
#sh startup.sh


echo "Check if mysql is started, and if not then start it"
until [ 0 = `sudo service mysql status | grep -cF 'MySQL is stopped'` ]
do
   echo "waiting for mysql to start"
   sudo service mysql start   
   sudo service mysql status
done

#Run in Debug Mode
export JPDA_TRANSPORT="dt_socket"
export JPDA_ADDRESS="8000"
export JPDA_SUSPEND="n"
export JPDA_OPTS="-agentlib:jdwp=transport=$JPDA_TRANSPORT,address=$JPDA_ADDRESS,server=y,suspend=$JPDA_SUSPEND"
sh catalina.sh jpda start

echo "Liferay is starting now in debug mode..."

tail -f $LIFERAY_HOME/tomcat-8.0.32/logs/catalina.out

